# LDAP authentication (and possibly attribute resolver) configuration
# Note, this doesn't apply to the use of JAAS authentication via LDAP

## Authenticator strategy, either anonSearchAuthenticator, bindSearchAuthenticator, directAuthenticator, adAuthenticator
idp.authn.LDAP.authenticator                    = bindSearchAuthenticator

## Connection properties ##
idp.authn.LDAP.ldapURL                          = {{ idp_authn_LDAP_ldapURL }}
{% if (idp_authn_LDAP_useStartTLS is defined) and (idp_authn_LDAP_useStartTLS in ['Yes','yes','True','true'] ) %}
idp.authn.LDAP.useStartTLS                      = true
{% else %}
idp.authn.LDAP.useStartTLS                      = false
{% endif %}
# Time in milliseconds that connects will block
#idp.authn.LDAP.connectTimeout                  = PT3S
# Time in milliseconds to wait for responses
#idp.authn.LDAP.responseTimeout                 = PT3S
# Connection strategy to use when multiple URLs are supplied, either ACTIVE_PASSIVE, ROUND_ROBIN, RANDOM
#idp.authn.LDAP.connectionStrategy              = ACTIVE_PASSIVE

{% if (idp_authn_LDAP_trustCertificates is defined) and (idp_authn_LDAP_trustCertificates in ['Yes','yes','True','true'] ) %}
## SSL configuration, either jvmTrust, certificateTrust, or keyStoreTrust
idp.authn.LDAP.sslConfig                       = certificateTrust

## If using certificateTrust above, set to the trusted certificate's path
idp.authn.LDAP.trustCertificates               = /opt/shibboleth-idp/credentials/ldap-server.crt
{% endif%}

## Return attributes during authentication
## NOTE: there is a separate property used for attribute resolution
idp.authn.LDAP.returnAttributes                = passwordExpirationTime,loginGraceRemaining

## DN resolution properties ##

# Search DN resolution, used by anonSearchAuthenticator, bindSearchAuthenticator
# for AD: CN=Users,DC=example,DC=org
idp.authn.LDAP.baseDN                          = {{ idp_authn_LDAP_baseDN }}
idp.authn.LDAP.subtreeSearch                   = {{ idp_authn_LDAP_subtreeSearch | default('false') }}
idp.authn.LDAP.userFilter                      = {{ idp_authn_LDAP_userFilter | default ('(uid={user})') }}

# bind search configuration
# for AD: idp.authn.LDAP.bindDN=adminuser@domain.com
idp.authn.LDAP.bindDN                          = {{ idp_authn_LDAP_bindDN }}

# Handling account state with OpenLDAP/AD for Shibboleth IdP v5.x
# https://tools.ietf.org/html/draft-behera-ldap-password-policy-10
idp.authn.LDAP.usePasswordPolicy                = {{ idp_authn_LDAP_usePasswordPolicy | default('false') }}

# https://tools.ietf.org/html/draft-vchu-ldap-pwd-policy-00
idp.authn.LDAP.usePasswordExpiration            = {{ idp_authn_LDAP_usePasswordExpiration | default('false') }}


# LDAP attribute configuration, see attribute-resolver.xml
# Note, this likely won't apply to the use of legacy V2 resolver configurations
idp.attribute.resolver.LDAP.ldapURL             = %{idp.authn.LDAP.ldapURL}
idp.attribute.resolver.LDAP.connectTimeout      = %{idp.authn.LDAP.connectTimeout:PT3S}
idp.attribute.resolver.LDAP.responseTimeout     = %{idp.authn.LDAP.responseTimeout:PT3S}
idp.attribute.resolver.LDAP.connectionStrategy  = %{idp.authn.LDAP.connectionStrategy:ACTIVE_PASSIVE}
idp.attribute.resolver.LDAP.baseDN              = %{idp.authn.LDAP.baseDN:undefined}
idp.attribute.resolver.LDAP.bindDN              = %{idp.authn.LDAP.bindDN:undefined}
idp.attribute.resolver.LDAP.useStartTLS         = %{idp.authn.LDAP.useStartTLS:true}
idp.attribute.resolver.LDAP.trustCertificates   = %{idp.authn.LDAP.trustCertificates:undefined}
idp.attribute.resolver.LDAP.searchFilter        = {{ idp_attribute_resolver_LDAP_searchFilter | default ('(uid=$resolutionContext.principal)') }}
idp.attribute.resolver.LDAP.exportAttributes    = uid givenName sn cn mail displayName eduPersonAffiliation eduPersonEntitlement eduPersonAssurance
